name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.23.1'
  APP_NAME: 'budget-bot'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61.0
        args: --timeout=3m
      env:
        GOTOOLCHAIN: go1.23.1

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref_type == 'tag' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            target: linux_amd64
          - os: linux
            arch: arm64
            target: linux_arm64
          - os: windows
            arch: amd64
            target: windows_amd64
          - os: darwin
            arch: amd64
            target: darwin_amd64
          - os: darwin
            arch: arm64
            target: darwin_arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -tags withgrpc -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/${{ env.APP_NAME }}-${{ matrix.target }} ./cmd/bot

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.target }}
        path: dist/${{ env.APP_NAME }}-${{ matrix.target }}
        retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref_type == 'tag'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release assets
      run: |
        cd dist
        for dir in */; do
          if [ -d "$dir" ]; then
            binary_name=$(ls "$dir" | head -1)
            target_name=$(basename "$dir")
            if [ "$binary_name" != "$target_name" ]; then
              mv "$dir/$binary_name" "$target_name"
            else
              mv "$dir/$binary_name" .
            fi
            chmod +x "$target_name"
            rmdir "$dir"
          fi
        done
        ls -la

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Upload to release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*
        body: |
          ## Budget Bot ${{ github.ref_name }}
          
          ### Downloads
          - `budget-bot-linux_amd64` - Linux x86_64
          - `budget-bot-linux_arm64` - Linux ARM64
          - `budget-bot-windows_amd64.exe` - Windows x86_64
          - `budget-bot-darwin_amd64` - macOS x86_64
          - `budget-bot-darwin_arm64` - macOS ARM64
          
          ### Installation
          1. Download the appropriate binary for your system
          2. Make it executable: `chmod +x budget-bot-linux_amd64`
          3. Create `.env` file with your configuration
          4. Run: `./budget-bot-linux_amd64`
          
          ### Checksums
          ```
          $(cat dist/checksums.txt)
          ```
        draft: false
        prerelease: false