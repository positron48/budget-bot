name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download modules
        run: go mod download
      - name: Build (default)
        run: go build -o bin/budget-bot ./cmd/bot
      - name: Test
        run: go test ./...
      - name: Coverage
        run: |
          set -euo pipefail
          # Run coverage for all packages at once (aggregated), then filter out generated pb & cmd
          go test -covermode=atomic -coverprofile=coverage_all.out ./...
          echo "mode: atomic" > coverage.out
          grep -h -v "^mode:" coverage_all.out | grep -v "/internal/pb/" | grep -v "/cmd/" >> coverage.out
          go tool cover -func=coverage.out | tail -n 1 | tee coverage_total.txt
          TOTAL=$(awk '/^total:/ {print $3}' coverage_total.txt | tr -d '%')
          echo "Total coverage: $TOTAL%"
          awk -v t=$TOTAL 'BEGIN{if (t+0 < 80) {print "Coverage below 80%: " t "%"; exit 1} else {print "Coverage OK (>=80%)"}}'
      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61.0
          args: --timeout=5m
        env:
          GOTOOLCHAIN: go1.23.1
