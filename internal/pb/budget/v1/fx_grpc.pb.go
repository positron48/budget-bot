// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: budget/v1/fx.proto

package budgetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FxService_GetRate_FullMethodName       = "/budget.v1.FxService/GetRate"
	FxService_UpsertRate_FullMethodName    = "/budget.v1.FxService/UpsertRate"
	FxService_BatchGetRates_FullMethodName = "/budget.v1.FxService/BatchGetRates"
)

// FxServiceClient is the client API for FxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FxServiceClient interface {
	// Returns a rate from one currency to another as of date
	GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error)
	// Administrative/manual override of a rate
	UpsertRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*UpsertRateResponse, error)
	// Batch query for multiple currencies to the same target
	BatchGetRates(ctx context.Context, in *BatchGetRatesRequest, opts ...grpc.CallOption) (*BatchGetRatesResponse, error)
}

type fxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFxServiceClient(cc grpc.ClientConnInterface) FxServiceClient {
	return &fxServiceClient{cc}
}

func (c *fxServiceClient) GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error) {
	out := new(GetRateResponse)
	err := c.cc.Invoke(ctx, FxService_GetRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxServiceClient) UpsertRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*UpsertRateResponse, error) {
	out := new(UpsertRateResponse)
	err := c.cc.Invoke(ctx, FxService_UpsertRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxServiceClient) BatchGetRates(ctx context.Context, in *BatchGetRatesRequest, opts ...grpc.CallOption) (*BatchGetRatesResponse, error) {
	out := new(BatchGetRatesResponse)
	err := c.cc.Invoke(ctx, FxService_BatchGetRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FxServiceServer is the server API for FxService service.
// All implementations must embed UnimplementedFxServiceServer
// for forward compatibility
type FxServiceServer interface {
	// Returns a rate from one currency to another as of date
	GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error)
	// Administrative/manual override of a rate
	UpsertRate(context.Context, *UpsertRateRequest) (*UpsertRateResponse, error)
	// Batch query for multiple currencies to the same target
	BatchGetRates(context.Context, *BatchGetRatesRequest) (*BatchGetRatesResponse, error)
	mustEmbedUnimplementedFxServiceServer()
}

// UnimplementedFxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFxServiceServer struct {
}

func (UnimplementedFxServiceServer) GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedFxServiceServer) UpsertRate(context.Context, *UpsertRateRequest) (*UpsertRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRate not implemented")
}
func (UnimplementedFxServiceServer) BatchGetRates(context.Context, *BatchGetRatesRequest) (*BatchGetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetRates not implemented")
}
func (UnimplementedFxServiceServer) mustEmbedUnimplementedFxServiceServer() {}

// UnsafeFxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FxServiceServer will
// result in compilation errors.
type UnsafeFxServiceServer interface {
	mustEmbedUnimplementedFxServiceServer()
}

func RegisterFxServiceServer(s grpc.ServiceRegistrar, srv FxServiceServer) {
	s.RegisterService(&FxService_ServiceDesc, srv)
}

func _FxService_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxServiceServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FxService_GetRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxServiceServer).GetRate(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxService_UpsertRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxServiceServer).UpsertRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FxService_UpsertRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxServiceServer).UpsertRate(ctx, req.(*UpsertRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxService_BatchGetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxServiceServer).BatchGetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FxService_BatchGetRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxServiceServer).BatchGetRates(ctx, req.(*BatchGetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FxService_ServiceDesc is the grpc.ServiceDesc for FxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budget.v1.FxService",
	HandlerType: (*FxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _FxService_GetRate_Handler,
		},
		{
			MethodName: "UpsertRate",
			Handler:    _FxService_UpsertRate_Handler,
		},
		{
			MethodName: "BatchGetRates",
			Handler:    _FxService_BatchGetRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budget/v1/fx.proto",
}
