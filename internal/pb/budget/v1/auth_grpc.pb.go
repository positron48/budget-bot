// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: budget/v1/auth.proto

package budgetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_Register_FullMethodName              = "/budget.v1.AuthService/Register"
	AuthService_Login_FullMethodName                 = "/budget.v1.AuthService/Login"
	AuthService_RefreshToken_FullMethodName          = "/budget.v1.AuthService/RefreshToken"
	AuthService_RequestPasswordReset_FullMethodName  = "/budget.v1.AuthService/RequestPasswordReset"
	AuthService_ResetPassword_FullMethodName         = "/budget.v1.AuthService/ResetPassword"
	AuthService_GenerateAuthLink_FullMethodName      = "/budget.v1.AuthService/GenerateAuthLink"
	AuthService_VerifyAuthCode_FullMethodName        = "/budget.v1.AuthService/VerifyAuthCode"
	AuthService_CancelAuth_FullMethodName            = "/budget.v1.AuthService/CancelAuth"
	AuthService_GetAuthStatus_FullMethodName         = "/budget.v1.AuthService/GetAuthStatus"
	AuthService_GetTelegramSession_FullMethodName    = "/budget.v1.AuthService/GetTelegramSession"
	AuthService_RevokeTelegramSession_FullMethodName = "/budget.v1.AuthService/RevokeTelegramSession"
	AuthService_ListTelegramSessions_FullMethodName  = "/budget.v1.AuthService/ListTelegramSessions"
	AuthService_GetAuthLogs_FullMethodName           = "/budget.v1.AuthService/GetAuthLogs"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// OAuth2 Flow Methods
	GenerateAuthLink(ctx context.Context, in *GenerateAuthLinkRequest, opts ...grpc.CallOption) (*GenerateAuthLinkResponse, error)
	VerifyAuthCode(ctx context.Context, in *VerifyAuthCodeRequest, opts ...grpc.CallOption) (*VerifyAuthCodeResponse, error)
	CancelAuth(ctx context.Context, in *CancelAuthRequest, opts ...grpc.CallOption) (*CancelAuthResponse, error)
	GetAuthStatus(ctx context.Context, in *GetAuthStatusRequest, opts ...grpc.CallOption) (*GetAuthStatusResponse, error)
	// Session Management
	GetTelegramSession(ctx context.Context, in *GetTelegramSessionRequest, opts ...grpc.CallOption) (*GetTelegramSessionResponse, error)
	RevokeTelegramSession(ctx context.Context, in *RevokeTelegramSessionRequest, opts ...grpc.CallOption) (*RevokeTelegramSessionResponse, error)
	ListTelegramSessions(ctx context.Context, in *ListTelegramSessionsRequest, opts ...grpc.CallOption) (*ListTelegramSessionsResponse, error)
	// Security Logs
	GetAuthLogs(ctx context.Context, in *GetAuthLogsRequest, opts ...grpc.CallOption) (*GetAuthLogsResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error) {
	out := new(RequestPasswordResetResponse)
	err := c.cc.Invoke(ctx, AuthService_RequestPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateAuthLink(ctx context.Context, in *GenerateAuthLinkRequest, opts ...grpc.CallOption) (*GenerateAuthLinkResponse, error) {
	out := new(GenerateAuthLinkResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateAuthLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyAuthCode(ctx context.Context, in *VerifyAuthCodeRequest, opts ...grpc.CallOption) (*VerifyAuthCodeResponse, error) {
	out := new(VerifyAuthCodeResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyAuthCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CancelAuth(ctx context.Context, in *CancelAuthRequest, opts ...grpc.CallOption) (*CancelAuthResponse, error) {
	out := new(CancelAuthResponse)
	err := c.cc.Invoke(ctx, AuthService_CancelAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAuthStatus(ctx context.Context, in *GetAuthStatusRequest, opts ...grpc.CallOption) (*GetAuthStatusResponse, error) {
	out := new(GetAuthStatusResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTelegramSession(ctx context.Context, in *GetTelegramSessionRequest, opts ...grpc.CallOption) (*GetTelegramSessionResponse, error) {
	out := new(GetTelegramSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetTelegramSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeTelegramSession(ctx context.Context, in *RevokeTelegramSessionRequest, opts ...grpc.CallOption) (*RevokeTelegramSessionResponse, error) {
	out := new(RevokeTelegramSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_RevokeTelegramSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListTelegramSessions(ctx context.Context, in *ListTelegramSessionsRequest, opts ...grpc.CallOption) (*ListTelegramSessionsResponse, error) {
	out := new(ListTelegramSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListTelegramSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAuthLogs(ctx context.Context, in *GetAuthLogsRequest, opts ...grpc.CallOption) (*GetAuthLogsResponse, error) {
	out := new(GetAuthLogsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAuthLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// OAuth2 Flow Methods
	GenerateAuthLink(context.Context, *GenerateAuthLinkRequest) (*GenerateAuthLinkResponse, error)
	VerifyAuthCode(context.Context, *VerifyAuthCodeRequest) (*VerifyAuthCodeResponse, error)
	CancelAuth(context.Context, *CancelAuthRequest) (*CancelAuthResponse, error)
	GetAuthStatus(context.Context, *GetAuthStatusRequest) (*GetAuthStatusResponse, error)
	// Session Management
	GetTelegramSession(context.Context, *GetTelegramSessionRequest) (*GetTelegramSessionResponse, error)
	RevokeTelegramSession(context.Context, *RevokeTelegramSessionRequest) (*RevokeTelegramSessionResponse, error)
	ListTelegramSessions(context.Context, *ListTelegramSessionsRequest) (*ListTelegramSessionsResponse, error)
	// Security Logs
	GetAuthLogs(context.Context, *GetAuthLogsRequest) (*GetAuthLogsResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedAuthServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthServiceServer) GenerateAuthLink(context.Context, *GenerateAuthLinkRequest) (*GenerateAuthLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAuthLink not implemented")
}
func (UnimplementedAuthServiceServer) VerifyAuthCode(context.Context, *VerifyAuthCodeRequest) (*VerifyAuthCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthCode not implemented")
}
func (UnimplementedAuthServiceServer) CancelAuth(context.Context, *CancelAuthRequest) (*CancelAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAuth not implemented")
}
func (UnimplementedAuthServiceServer) GetAuthStatus(context.Context, *GetAuthStatusRequest) (*GetAuthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthStatus not implemented")
}
func (UnimplementedAuthServiceServer) GetTelegramSession(context.Context, *GetTelegramSessionRequest) (*GetTelegramSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramSession not implemented")
}
func (UnimplementedAuthServiceServer) RevokeTelegramSession(context.Context, *RevokeTelegramSessionRequest) (*RevokeTelegramSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeTelegramSession not implemented")
}
func (UnimplementedAuthServiceServer) ListTelegramSessions(context.Context, *ListTelegramSessionsRequest) (*ListTelegramSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelegramSessions not implemented")
}
func (UnimplementedAuthServiceServer) GetAuthLogs(context.Context, *GetAuthLogsRequest) (*GetAuthLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthLogs not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RequestPasswordReset(ctx, req.(*RequestPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateAuthLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAuthLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateAuthLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateAuthLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateAuthLink(ctx, req.(*GenerateAuthLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyAuthCode(ctx, req.(*VerifyAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CancelAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CancelAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelAuth(ctx, req.(*CancelAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthStatus(ctx, req.(*GetAuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTelegramSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelegramSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTelegramSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTelegramSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTelegramSession(ctx, req.(*GetTelegramSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeTelegramSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTelegramSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeTelegramSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RevokeTelegramSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeTelegramSession(ctx, req.(*RevokeTelegramSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListTelegramSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelegramSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListTelegramSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListTelegramSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListTelegramSessions(ctx, req.(*ListTelegramSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAuthLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthLogs(ctx, req.(*GetAuthLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budget.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _AuthService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthService_ResetPassword_Handler,
		},
		{
			MethodName: "GenerateAuthLink",
			Handler:    _AuthService_GenerateAuthLink_Handler,
		},
		{
			MethodName: "VerifyAuthCode",
			Handler:    _AuthService_VerifyAuthCode_Handler,
		},
		{
			MethodName: "CancelAuth",
			Handler:    _AuthService_CancelAuth_Handler,
		},
		{
			MethodName: "GetAuthStatus",
			Handler:    _AuthService_GetAuthStatus_Handler,
		},
		{
			MethodName: "GetTelegramSession",
			Handler:    _AuthService_GetTelegramSession_Handler,
		},
		{
			MethodName: "RevokeTelegramSession",
			Handler:    _AuthService_RevokeTelegramSession_Handler,
		},
		{
			MethodName: "ListTelegramSessions",
			Handler:    _AuthService_ListTelegramSessions_Handler,
		},
		{
			MethodName: "GetAuthLogs",
			Handler:    _AuthService_GetAuthLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budget/v1/auth.proto",
}
