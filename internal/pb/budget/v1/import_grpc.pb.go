// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: budget/v1/import.proto

package budgetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImportService_StartCsvImport_FullMethodName      = "/budget.v1.ImportService/StartCsvImport"
	ImportService_UploadCsvChunk_FullMethodName      = "/budget.v1.ImportService/UploadCsvChunk"
	ImportService_ConfigureCsvMapping_FullMethodName = "/budget.v1.ImportService/ConfigureCsvMapping"
	ImportService_PreviewCsvImport_FullMethodName    = "/budget.v1.ImportService/PreviewCsvImport"
	ImportService_CommitCsvImport_FullMethodName     = "/budget.v1.ImportService/CommitCsvImport"
)

// ImportServiceClient is the client API for ImportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportServiceClient interface {
	StartCsvImport(ctx context.Context, in *StartCsvImportRequest, opts ...grpc.CallOption) (*StartCsvImportResponse, error)
	UploadCsvChunk(ctx context.Context, in *UploadCsvChunkRequest, opts ...grpc.CallOption) (*UploadCsvChunkResponse, error)
	ConfigureCsvMapping(ctx context.Context, in *ConfigureCsvMappingRequest, opts ...grpc.CallOption) (*ConfigureCsvMappingResponse, error)
	PreviewCsvImport(ctx context.Context, in *PreviewCsvImportRequest, opts ...grpc.CallOption) (*PreviewCsvImportResponse, error)
	CommitCsvImport(ctx context.Context, in *CommitCsvImportRequest, opts ...grpc.CallOption) (*CommitCsvImportResponse, error)
}

type importServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportServiceClient(cc grpc.ClientConnInterface) ImportServiceClient {
	return &importServiceClient{cc}
}

func (c *importServiceClient) StartCsvImport(ctx context.Context, in *StartCsvImportRequest, opts ...grpc.CallOption) (*StartCsvImportResponse, error) {
	out := new(StartCsvImportResponse)
	err := c.cc.Invoke(ctx, ImportService_StartCsvImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) UploadCsvChunk(ctx context.Context, in *UploadCsvChunkRequest, opts ...grpc.CallOption) (*UploadCsvChunkResponse, error) {
	out := new(UploadCsvChunkResponse)
	err := c.cc.Invoke(ctx, ImportService_UploadCsvChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) ConfigureCsvMapping(ctx context.Context, in *ConfigureCsvMappingRequest, opts ...grpc.CallOption) (*ConfigureCsvMappingResponse, error) {
	out := new(ConfigureCsvMappingResponse)
	err := c.cc.Invoke(ctx, ImportService_ConfigureCsvMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) PreviewCsvImport(ctx context.Context, in *PreviewCsvImportRequest, opts ...grpc.CallOption) (*PreviewCsvImportResponse, error) {
	out := new(PreviewCsvImportResponse)
	err := c.cc.Invoke(ctx, ImportService_PreviewCsvImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) CommitCsvImport(ctx context.Context, in *CommitCsvImportRequest, opts ...grpc.CallOption) (*CommitCsvImportResponse, error) {
	out := new(CommitCsvImportResponse)
	err := c.cc.Invoke(ctx, ImportService_CommitCsvImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportServiceServer is the server API for ImportService service.
// All implementations must embed UnimplementedImportServiceServer
// for forward compatibility
type ImportServiceServer interface {
	StartCsvImport(context.Context, *StartCsvImportRequest) (*StartCsvImportResponse, error)
	UploadCsvChunk(context.Context, *UploadCsvChunkRequest) (*UploadCsvChunkResponse, error)
	ConfigureCsvMapping(context.Context, *ConfigureCsvMappingRequest) (*ConfigureCsvMappingResponse, error)
	PreviewCsvImport(context.Context, *PreviewCsvImportRequest) (*PreviewCsvImportResponse, error)
	CommitCsvImport(context.Context, *CommitCsvImportRequest) (*CommitCsvImportResponse, error)
	mustEmbedUnimplementedImportServiceServer()
}

// UnimplementedImportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImportServiceServer struct {
}

func (UnimplementedImportServiceServer) StartCsvImport(context.Context, *StartCsvImportRequest) (*StartCsvImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCsvImport not implemented")
}
func (UnimplementedImportServiceServer) UploadCsvChunk(context.Context, *UploadCsvChunkRequest) (*UploadCsvChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCsvChunk not implemented")
}
func (UnimplementedImportServiceServer) ConfigureCsvMapping(context.Context, *ConfigureCsvMappingRequest) (*ConfigureCsvMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCsvMapping not implemented")
}
func (UnimplementedImportServiceServer) PreviewCsvImport(context.Context, *PreviewCsvImportRequest) (*PreviewCsvImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCsvImport not implemented")
}
func (UnimplementedImportServiceServer) CommitCsvImport(context.Context, *CommitCsvImportRequest) (*CommitCsvImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitCsvImport not implemented")
}
func (UnimplementedImportServiceServer) mustEmbedUnimplementedImportServiceServer() {}

// UnsafeImportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportServiceServer will
// result in compilation errors.
type UnsafeImportServiceServer interface {
	mustEmbedUnimplementedImportServiceServer()
}

func RegisterImportServiceServer(s grpc.ServiceRegistrar, srv ImportServiceServer) {
	s.RegisterService(&ImportService_ServiceDesc, srv)
}

func _ImportService_StartCsvImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCsvImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).StartCsvImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_StartCsvImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).StartCsvImport(ctx, req.(*StartCsvImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_UploadCsvChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCsvChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).UploadCsvChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_UploadCsvChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).UploadCsvChunk(ctx, req.(*UploadCsvChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_ConfigureCsvMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureCsvMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).ConfigureCsvMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_ConfigureCsvMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).ConfigureCsvMapping(ctx, req.(*ConfigureCsvMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_PreviewCsvImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewCsvImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).PreviewCsvImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_PreviewCsvImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).PreviewCsvImport(ctx, req.(*PreviewCsvImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_CommitCsvImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitCsvImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).CommitCsvImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_CommitCsvImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).CommitCsvImport(ctx, req.(*CommitCsvImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportService_ServiceDesc is the grpc.ServiceDesc for ImportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budget.v1.ImportService",
	HandlerType: (*ImportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCsvImport",
			Handler:    _ImportService_StartCsvImport_Handler,
		},
		{
			MethodName: "UploadCsvChunk",
			Handler:    _ImportService_UploadCsvChunk_Handler,
		},
		{
			MethodName: "ConfigureCsvMapping",
			Handler:    _ImportService_ConfigureCsvMapping_Handler,
		},
		{
			MethodName: "PreviewCsvImport",
			Handler:    _ImportService_PreviewCsvImport_Handler,
		},
		{
			MethodName: "CommitCsvImport",
			Handler:    _ImportService_CommitCsvImport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budget/v1/import.proto",
}
