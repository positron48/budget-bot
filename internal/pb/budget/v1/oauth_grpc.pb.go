// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: budget/v1/oauth.proto

package budgetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OAuthService_GenerateAuthLink_FullMethodName      = "/budget.v1.OAuthService/GenerateAuthLink"
	OAuthService_VerifyAuthCode_FullMethodName        = "/budget.v1.OAuthService/VerifyAuthCode"
	OAuthService_CancelAuth_FullMethodName            = "/budget.v1.OAuthService/CancelAuth"
	OAuthService_GetAuthStatus_FullMethodName         = "/budget.v1.OAuthService/GetAuthStatus"
	OAuthService_GetTelegramSession_FullMethodName    = "/budget.v1.OAuthService/GetTelegramSession"
	OAuthService_RevokeTelegramSession_FullMethodName = "/budget.v1.OAuthService/RevokeTelegramSession"
	OAuthService_ListTelegramSessions_FullMethodName  = "/budget.v1.OAuthService/ListTelegramSessions"
	OAuthService_GetAuthLogs_FullMethodName           = "/budget.v1.OAuthService/GetAuthLogs"
)

// OAuthServiceClient is the client API for OAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthServiceClient interface {
	// Основные методы OAuth2 flow
	GenerateAuthLink(ctx context.Context, in *GenerateAuthLinkRequest, opts ...grpc.CallOption) (*GenerateAuthLinkResponse, error)
	VerifyAuthCode(ctx context.Context, in *VerifyAuthCodeRequest, opts ...grpc.CallOption) (*VerifyAuthCodeResponse, error)
	CancelAuth(ctx context.Context, in *CancelAuthRequest, opts ...grpc.CallOption) (*CancelAuthResponse, error)
	GetAuthStatus(ctx context.Context, in *GetAuthStatusRequest, opts ...grpc.CallOption) (*GetAuthStatusResponse, error)
	// Управление сессиями Telegram
	GetTelegramSession(ctx context.Context, in *GetTelegramSessionRequest, opts ...grpc.CallOption) (*GetTelegramSessionResponse, error)
	RevokeTelegramSession(ctx context.Context, in *RevokeTelegramSessionRequest, opts ...grpc.CallOption) (*RevokeTelegramSessionResponse, error)
	ListTelegramSessions(ctx context.Context, in *ListTelegramSessionsRequest, opts ...grpc.CallOption) (*ListTelegramSessionsResponse, error)
	// Логирование безопасности
	GetAuthLogs(ctx context.Context, in *GetAuthLogsRequest, opts ...grpc.CallOption) (*GetAuthLogsResponse, error)
}

type oAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthServiceClient(cc grpc.ClientConnInterface) OAuthServiceClient {
	return &oAuthServiceClient{cc}
}

func (c *oAuthServiceClient) GenerateAuthLink(ctx context.Context, in *GenerateAuthLinkRequest, opts ...grpc.CallOption) (*GenerateAuthLinkResponse, error) {
	out := new(GenerateAuthLinkResponse)
	err := c.cc.Invoke(ctx, OAuthService_GenerateAuthLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) VerifyAuthCode(ctx context.Context, in *VerifyAuthCodeRequest, opts ...grpc.CallOption) (*VerifyAuthCodeResponse, error) {
	out := new(VerifyAuthCodeResponse)
	err := c.cc.Invoke(ctx, OAuthService_VerifyAuthCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) CancelAuth(ctx context.Context, in *CancelAuthRequest, opts ...grpc.CallOption) (*CancelAuthResponse, error) {
	out := new(CancelAuthResponse)
	err := c.cc.Invoke(ctx, OAuthService_CancelAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetAuthStatus(ctx context.Context, in *GetAuthStatusRequest, opts ...grpc.CallOption) (*GetAuthStatusResponse, error) {
	out := new(GetAuthStatusResponse)
	err := c.cc.Invoke(ctx, OAuthService_GetAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetTelegramSession(ctx context.Context, in *GetTelegramSessionRequest, opts ...grpc.CallOption) (*GetTelegramSessionResponse, error) {
	out := new(GetTelegramSessionResponse)
	err := c.cc.Invoke(ctx, OAuthService_GetTelegramSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) RevokeTelegramSession(ctx context.Context, in *RevokeTelegramSessionRequest, opts ...grpc.CallOption) (*RevokeTelegramSessionResponse, error) {
	out := new(RevokeTelegramSessionResponse)
	err := c.cc.Invoke(ctx, OAuthService_RevokeTelegramSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) ListTelegramSessions(ctx context.Context, in *ListTelegramSessionsRequest, opts ...grpc.CallOption) (*ListTelegramSessionsResponse, error) {
	out := new(ListTelegramSessionsResponse)
	err := c.cc.Invoke(ctx, OAuthService_ListTelegramSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetAuthLogs(ctx context.Context, in *GetAuthLogsRequest, opts ...grpc.CallOption) (*GetAuthLogsResponse, error) {
	out := new(GetAuthLogsResponse)
	err := c.cc.Invoke(ctx, OAuthService_GetAuthLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServiceServer is the server API for OAuthService service.
// All implementations must embed UnimplementedOAuthServiceServer
// for forward compatibility
type OAuthServiceServer interface {
	// Основные методы OAuth2 flow
	GenerateAuthLink(context.Context, *GenerateAuthLinkRequest) (*GenerateAuthLinkResponse, error)
	VerifyAuthCode(context.Context, *VerifyAuthCodeRequest) (*VerifyAuthCodeResponse, error)
	CancelAuth(context.Context, *CancelAuthRequest) (*CancelAuthResponse, error)
	GetAuthStatus(context.Context, *GetAuthStatusRequest) (*GetAuthStatusResponse, error)
	// Управление сессиями Telegram
	GetTelegramSession(context.Context, *GetTelegramSessionRequest) (*GetTelegramSessionResponse, error)
	RevokeTelegramSession(context.Context, *RevokeTelegramSessionRequest) (*RevokeTelegramSessionResponse, error)
	ListTelegramSessions(context.Context, *ListTelegramSessionsRequest) (*ListTelegramSessionsResponse, error)
	// Логирование безопасности
	GetAuthLogs(context.Context, *GetAuthLogsRequest) (*GetAuthLogsResponse, error)
	mustEmbedUnimplementedOAuthServiceServer()
}

// UnimplementedOAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthServiceServer struct {
}

func (UnimplementedOAuthServiceServer) GenerateAuthLink(context.Context, *GenerateAuthLinkRequest) (*GenerateAuthLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAuthLink not implemented")
}
func (UnimplementedOAuthServiceServer) VerifyAuthCode(context.Context, *VerifyAuthCodeRequest) (*VerifyAuthCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthCode not implemented")
}
func (UnimplementedOAuthServiceServer) CancelAuth(context.Context, *CancelAuthRequest) (*CancelAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAuth not implemented")
}
func (UnimplementedOAuthServiceServer) GetAuthStatus(context.Context, *GetAuthStatusRequest) (*GetAuthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthStatus not implemented")
}
func (UnimplementedOAuthServiceServer) GetTelegramSession(context.Context, *GetTelegramSessionRequest) (*GetTelegramSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramSession not implemented")
}
func (UnimplementedOAuthServiceServer) RevokeTelegramSession(context.Context, *RevokeTelegramSessionRequest) (*RevokeTelegramSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeTelegramSession not implemented")
}
func (UnimplementedOAuthServiceServer) ListTelegramSessions(context.Context, *ListTelegramSessionsRequest) (*ListTelegramSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelegramSessions not implemented")
}
func (UnimplementedOAuthServiceServer) GetAuthLogs(context.Context, *GetAuthLogsRequest) (*GetAuthLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthLogs not implemented")
}
func (UnimplementedOAuthServiceServer) mustEmbedUnimplementedOAuthServiceServer() {}

// UnsafeOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServiceServer will
// result in compilation errors.
type UnsafeOAuthServiceServer interface {
	mustEmbedUnimplementedOAuthServiceServer()
}

func RegisterOAuthServiceServer(s grpc.ServiceRegistrar, srv OAuthServiceServer) {
	s.RegisterService(&OAuthService_ServiceDesc, srv)
}

func _OAuthService_GenerateAuthLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAuthLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GenerateAuthLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GenerateAuthLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GenerateAuthLink(ctx, req.(*GenerateAuthLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_VerifyAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).VerifyAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_VerifyAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).VerifyAuthCode(ctx, req.(*VerifyAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_CancelAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).CancelAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_CancelAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).CancelAuth(ctx, req.(*CancelAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GetAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetAuthStatus(ctx, req.(*GetAuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetTelegramSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelegramSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetTelegramSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GetTelegramSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetTelegramSession(ctx, req.(*GetTelegramSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_RevokeTelegramSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTelegramSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).RevokeTelegramSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_RevokeTelegramSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).RevokeTelegramSession(ctx, req.(*RevokeTelegramSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_ListTelegramSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelegramSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).ListTelegramSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_ListTelegramSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).ListTelegramSessions(ctx, req.(*ListTelegramSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetAuthLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetAuthLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GetAuthLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetAuthLogs(ctx, req.(*GetAuthLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthService_ServiceDesc is the grpc.ServiceDesc for OAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budget.v1.OAuthService",
	HandlerType: (*OAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAuthLink",
			Handler:    _OAuthService_GenerateAuthLink_Handler,
		},
		{
			MethodName: "VerifyAuthCode",
			Handler:    _OAuthService_VerifyAuthCode_Handler,
		},
		{
			MethodName: "CancelAuth",
			Handler:    _OAuthService_CancelAuth_Handler,
		},
		{
			MethodName: "GetAuthStatus",
			Handler:    _OAuthService_GetAuthStatus_Handler,
		},
		{
			MethodName: "GetTelegramSession",
			Handler:    _OAuthService_GetTelegramSession_Handler,
		},
		{
			MethodName: "RevokeTelegramSession",
			Handler:    _OAuthService_RevokeTelegramSession_Handler,
		},
		{
			MethodName: "ListTelegramSessions",
			Handler:    _OAuthService_ListTelegramSessions_Handler,
		},
		{
			MethodName: "GetAuthLogs",
			Handler:    _OAuthService_GetAuthLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budget/v1/oauth.proto",
}
